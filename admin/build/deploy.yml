# GitHub Actions 워크플로우 - Jekyll 어드민 사이트 배포
# .github/workflows/deploy-admin.yml 파일로 복사하여 사용

name: Deploy Jekyll Admin Site

on:
  push:
    branches: [ main, master ]
    paths:
      - 'admin/**'
      - '_config.yml'
      - '.github/workflows/deploy-admin.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'admin/**'

  # 수동 실행 허용
  workflow_dispatch:

# 환경변수 설정
env:
  VITE_ADMIN_ID: ${{ secrets.ADMIN_ID }}
  VITE_ADMIN_PW: ${{ secrets.ADMIN_PW }}

jobs:
  # 빌드 및 테스트
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'admin/package-lock.json'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: Install dependencies
      run: |
        gem install jekyll bundler
        bundle install
        cd admin && npm install

    - name: Run tests
      run: |
        cd admin
        npm test
        npm run test:integration

    - name: Lint code
      run: |
        cd admin
        npm run lint:js
        npm run lint:css

    - name: Build Jekyll site
      run: |
        bundle exec jekyll build
      env:
        JEKYLL_ENV: production

    - name: Optimize admin assets
      run: |
        cd admin
        node build/optimize.js

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: admin-build
        path: |
          _site/
          admin/dist/
        retention-days: 30

  # 보안 검사
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd admin
        npm audit --audit-level moderate

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./admin/
        base: main
        head: HEAD

  # 성능 테스트
  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: admin-build

    - name: Setup Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # GitHub Pages 배포
  deploy-github-pages:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # GitHub Pages 배포 권한 설정
    permissions:
      contents: read
      pages: write
      id-token: write

    # 동시 배포 방지
    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        gem install jekyll bundler
        bundle install
        cd admin && npm install

    - name: Build Jekyll site
      run: |
        bundle exec jekyll build
      env:
        JEKYLL_ENV: production

    - name: Optimize admin assets
      run: |
        cd admin
        node build/optimize.js
        # 최적화된 파일을 _site로 복사
        cp -r dist/* ../_site/admin/

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 배포 알림
  notify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-github-pages
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy-github-pages.result }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 배포 후 검증
  post-deployment-check:
    runs-on: ubuntu-latest
    needs: deploy-github-pages
    if: success()
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Check site availability
      run: |
        curl -f -s -o /dev/null ${{ needs.deploy-github-pages.outputs.page_url }} || exit 1
        curl -f -s -o /dev/null ${{ needs.deploy-github-pages.outputs.page_url }}admin/ || exit 1

    - name: Run smoke tests
      run: |
        # 기본적인 연결 테스트
        curl -f -s ${{ needs.deploy-github-pages.outputs.page_url }}admin/assets/js/main.js > /dev/null
        curl -f -s ${{ needs.deploy-github-pages.outputs.page_url }}admin/assets/css/admin.css > /dev/null

    - name: Notify success
      if: success()
      run: |
        echo "✅ 배포 완료 및 검증 성공!"
        echo "🌐 사이트 URL: ${{ needs.deploy-github-pages.outputs.page_url }}"
        echo "🔧 어드민 URL: ${{ needs.deploy-github-pages.outputs.page_url }}admin/"