---
layout: post
title:  "웹 초보 개발자의 1일 1앱 바이브 코딩 후기"
date:   2025-08-05 13:27:35 +0900
categories: 바이브코딩
---

# 웹 초보 개발자의 1일 1앱 바이브 코딩 후기

*2025-08-05* | [DevCanvas](https://dev-canvas-pi.vercel.app/)

안녕하세요! 저는 웹 개발 경력이 전무한 개발자입니다. 모바일 게임, 임베디드 등 다양한 분야에서 개발을 해왔지만, 웹 개발은 대학 시절 ASP로 게시판을 만들어 본 게 전부였죠. 그런 제가 최근 **바이브 코딩(Vibe Coding)**으로 1일 1앱 만들기를 진행하며 느낀 점들을 공유해볼까 합니다.

## 바이브 코딩을 시작하게 된 계기

올해 3월 초, 저는 우연히 개발 도구인 **커서(Cursor)**를 통해 바이브 코딩을 처음 접하게 되었습니다. 처음에는 막연하게만 생각하다가, 5월 구글 I/O에서 'Build apps with Gemini' 쇼케이스를 보고 '이거다!' 싶었죠. 토큰 제한 없이 마음껏 바이브 코딩을 할 수 있겠다는 확신이 들었고, 바로 5월 23일에 첫 프로젝트를 시작했습니다. 3시간 만에 생각보다 꽤 괜찮은 결과물이 나와서 놀랐습니다. 다음 날 출근해서 또 하나를 만들었더니, 어느새 5개째를 만들고 있더군요. 그때 "매일 하나씩도 충분히 가능하겠다"라는 자신감이 생겼고, 이것이 1일 1앱 챌린지의 시작이 되었습니다. **5월 23일부터 8월 1일까지 총 70일, 공휴일과 주말을 제외하면 47일 동안 꾸준히 앱을 만들었습니다. 특히 마지막 10일 동안은 약 50개 정도를 만들었고, 하루에 최대 11개까지 만들어 본 날도 있었습니다.**

## 나만의 개발 방침과 사용한 도구들

이 프로젝트는 어디까지나 취미를 위한 토이 프로젝트였기 때문에, **'최대한 비용 없이 진행하자'**는 원칙을 세웠습니다.

- **배포:** 비용 없이 무제한 배포가 가능한 Vercel을 선택했습니다.
- **데이터베이스:** 처음에는 Supabase를 사용했는데, 무료 플랜은 프로젝트 2개까지만 지원한다는 사실을 알고 1GB 이내에 프로젝트 개수 제한이 없는 Firebase로 옮겨갔습니다.
- **개발 도구:** 커서 외에 5가지 도구를 더 사용하고 있지만 현재 커서 이외의 비용은 전혀 발생하지 않고 있습니다.

처음에는 하루에 한 프로젝트씩 완성하는 방식으로 진행했지만, 바쁜 일정에도 꾸준히 이어나가기 위해 하루에 2개, 3개, 나중에는 4개까지 병렬로 프로젝트를 진행하며 효율성을 높여갔습니다.

## 기억에 남는 프로젝트들

100개가 넘는 프로젝트를 진행하며 특히 기억에 남는 것들을 몇 가지 소개해 드릴게요.

### 세계 대전 시뮬레이터

![세계 대전 시뮬레이터 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/001_viv.jpg?raw=true)

1일 1앱 챌린지의 시작점입니다. 별 기대 없이 3시간 정도 투자해서 만들었는데, 기대 이상으로 잘 나와서 챌린지를 이어가는 원동력이 되었죠.

### 다량 생산을 목적으로 만든 도구

- **RPG 스크립트 편집기**

  ![RPG 스크립트 편집기 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/017_viv.png?raw=true)

  RPG 스크립트를 만들고, Gemini API를 사용해서 시나리오를 생성하면 하루에 10개 게임도 만들 수 있겠다 싶어 시작한 프로젝트. 결론은 가능하지만 품질 낮은 게임을 양산해 봤자 무슨 소용이 있을까 싶습니다. 해당 스크립트로 만든 게임은 2개.

- **구글 앱스크립트 마법사**

  ![구글 앱스크립트 마법사 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/018_viv.png?raw=true)

  DB가 필요하지만 비용 없이 만들려면 어떻게 해야 할까 고민하다가 구글 스프레드시트를 DB로 사용하자라는 생각에서 시작. DB가 필요한 앱을 비용 없이 빠르게 만들 수 있지만 속도가 느려서 해당 앱으로 생성된 앱은 1개.

- **앱 생성 프롬프트 아이디어 마법사**

  ![앱 생성 프롬프트 아이디어 마법사 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/042_viv.webp?raw=true)

  1일 1앱을 만들던 중 소재 고갈이 생길 것을 대비해 만들었습니다. 2~3번 정도 활용한 것 같습니다.

### 디아블록

![디아블록 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/028_viv.jpg?raw=true)

가장 오랜 시간이 걸렸던 프로젝트입니다. 개발 막바지에 저장 실수를 하는 바람에 무려 3일간 헤매었습니다. 중간에 포기하고 싶었지만, 결국 완성해냈다는 것에 큰 의미가 있습니다.

### 테라리움

![테라리움 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/030_viv.jpg?raw=true)

그냥 테이블 위에 있던 테라리움을 보고 의식의 흐름대로 만들었는데, 제미니에게 계속 고도화를 요청했더니 생태계 시스템이 논문 수준으로 복잡해지는 경험을 했습니다. 비주얼과 게임성은 별로인 점은 아쉬웠습니다.

### 코어브레이커

![코어브레이커 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/039_viv.jpg?raw=true)

터지고 폭발하는 게 시원해서 만드는 과정 자체가 즐거웠던 프로젝트입니다. 결과물은 다소 허술하지만, 개발하는 동안 재미있었습니다.

### DevCanvas

![DevCanvas 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/051_viv.jpg?raw=true)

생성하는 앱이 늘어나기 시작하니 관리가 필요하겠다 싶어 만들었습니다.

### AI 테크 허브

![AI 테크 허브 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/052_viv.jpg?raw=true)

AI 관련 도구와 콘텐츠들이 너무 많이 쏟아져서 정리해두면 좋겠다 싶어 만들었습니다.

### Mac OS 스타일 게시판

![Mac OS 스타일 게시판 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/043_viv.jpg?raw=true)

주변 사람과 정보를 공유할 만한 게시판이 필요해 만들었습니다.

### 토너먼트 맞고

![토너먼트 맞고 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/050_viv.jpg?raw=true)

매번 이미지 리소스 없이 프로젝트를 하다 보니 한계가 있어 외부 리소스를 사용해보려고 만들었습니다. 하지만 구글 AI 스튜디오에서 외부 리소스를 인식하지 못했습니다. 게임은 3~4시간 걸렸는데, 리소스를 불러오는데만 3일 걸렸습니다.

- **트레이더: STONKS-9800**

  ![트레이더: STONKS-9800 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/080_viv.jpg?raw=true)

  스팀에서 STONKS-9800 데모 게임을 30분 정도 해본 적이 있는데 갑자기 생각나서 만들어 보았습니다. 기대한 것보다 잘 나와서 기억에 남습니다.

### 전세계 지진 추적기

![전세계 지진 추적기 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/083_viv.png?raw=true)

이 프로젝트를 계기로 앱에서 맵을 어떻게 사용해야 할지 깨달았습니다.

### 캐피탈리즘 월드

![캐피탈리즘 월드 이미지](https://github.com/sigco3111/blog/blob/main/assets/image/100_viv.png?raw=true)

캐피탈리즘의 팬으로서 100번째는 캐피탈리즘으로 마무리하고 싶었습니다.

---

## 사용해본 AI 개발 도구 후기

- **Google AI Studio Build apps with Gemini**: 가장 많이 사용한 도구입니다. 무료이고 사용량 제한도 거의 없어 부담이 없죠. 요령이 생기면 꽤 쓸만합니다.
- **Cursor**: 바이브 코딩의 시작을 함께한 도구라 애정이 많습니다. 프로젝트의 마무리는 대부분 커서에서 했지만, 요금제 개편으로 인해 아쉽게도 구독을 종료할 예정입니다.
- **Gemini CLI**: 무료라서 가볍게 사용하기 좋지만, 사용할수록 아쉬운 점이 많아 간단한 지시나 MCP를 쓸 때만 종종 사용했습니다.
- **Qwen Code CLI**: openrouter에서 무료 API 키를 받아 몇 번 사용했는데, 하루 사용량이 금방 바닥났습니다. 근성이 있다면 openrouter 계정을 30개쯤 만들어서 사용량이 바닥날 때마다 교체해서 쓸 수도 있겠지만...
- **Kiro**: 가장 만족도가 높은 도구였지만, 유료화 이후 가격 정책을 보면 계속 사용하기는 어려울 것 같습니다.

클로드 CLI는 넉넉히 사용하려면 비용 감당이 안 되고, Trae는 아직 사용해보지 않았지만 중국산이라 좀 찜찜해도 가격이 마음에 들어서 결국 개인적으로 Trae를 사용할 듯합니다.

참고로, 저는 웹 개발 경력이 전무하지만 DirectX+Win32, MFC, GP32, GVM, Brew, LG-JAVA, SK-VM, Nokia J2ME, WIPI-Java, NDS(NintendoDS), WIPI-C, Bada, Android, iOS와 같은 분야에서 개발 경험은 있습니다.

## 팁

저처럼 바이브 코딩을 시작하려는 분들을 위해 몇 가지 팁을 공유해 드립니다.

- **병렬 프로젝트 관리:** 구글 Build apps는 한 계정으로 2개까지는 병렬 프로젝트를 진행해도 무리가 없지만, 3개 이상은 하루 사용량이 금방 소진됩니다. 이럴 때는 계정 두 개를 활용하는 것을 추천합니다.
- **프롬프트 저장:** 구글 Build apps는 프롬프트가 저장되지 않아 새로고침하면 내용이 사라집니다. 따라서 "고도화 방안을 단계적으로 나누고, md 파일로 체크리스트를 만들어줘." 같은 지시를 통해 작업 내역을 항상 md 파일로 남기고, 이를 바탕으로 작업하는 습관을 들이는 것이 좋습니다.
- **할루시네이션(Hallucination) 대처:** AI가 "처리했습니다"라고 했지만 코드를 수정하지 않는 경우가 종종 있습니다. 이때는 새 대화를 시작하는 것이 좋습니다. 그렇지 않으면 계속 엉뚱한 결과물만 보게 될 수 있습니다.
- **사고 과정 유도:** AI가 계속 같은 문제를 반복할 경우, 프롬프트 뒤에 **"ultrathink하게 생각하고, 순차적으로 사고한 다음 단계적으로 처리해줘."**라는 문구를 추가하면 효과를 볼 때가 있습니다. (출처: [https://www.ultrathink.engineer/](https://www.ultrathink.engineer/))
- **태스크 관리 도구:** 저는 비용 부담 없이 쉬림프 태스크 매니저를 주로 활용했습니다. 하지만 개인적으로는 **부스터(Vooster)**가 가장 좋은 태스크 관리 도구라고 생각합니다.
- 팁이 추가로 더 기억이 나면 업데이트하겠습니다.